<!-- **************************************************************************
#
# Copyright  (c) 2004-2009 Oracle Corporation.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors: 
#
#    Kohsuke Kawaguchi, Yahoo! Inc.
#        
#
#************************************************************************** --> 


<!--
  Use AJAX to load text data progressively.
  This is used to achieve the effect of "tail -f"
  without relying on full page reload.

	<%@attribute name="href" required="true" description="URL that returns text data" %>
	<%@attribute name="idref" required="true" description="ID of the HTML element in which the result is displayed" %>
	<%@attribute name="spinner" required="false" description="ID of the HTML element in which the spinner is displayed" %>
	<%@attribute name="startOffset" required="false" description="Skip this many bytes rather than showing from start of data" %>
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
	<!--
	  script code
	-->
	<script>
    var scroller = new AutoScroller(document.body);
    <j:if test="${requestScope.progressiveTextScript==null}">
	    <j:set target="${requestScope}" property="progressiveTextScript" value="initialized" />
	    <!--
	      fetches the latest update from the server

	      @param e
	          DOM node that gets the text appended to
	      @param href
	          Where to retrieve additional text from
	    -->
	    function fetchNext(e,href) {
        var headers = {};
        if (e.consoleAnnotator!=undefined)
          headers["X-ConsoleAnnotator"] = e.consoleAnnotator;

	      new Ajax.Request(href,{
	          method: "post",
	          parameters: {"start":e.fetchedBytes},
            requestHeaders: headers,
	          onComplete: function(rsp,_) {
              <!-- append text and do autoscroll if applicable-->
              var stickToBottom = scroller.isSticking();
              var text = rsp.responseText;
              if(text!="") {
                var p = document.createElement("DIV");
                e.appendChild(p); // Needs to be first for IE
                // Use "outerHTML" for IE; workaround for:
                // http://www.quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
                if (p.outerHTML) {
                  p.outerHTML = '<pre>'+text+'</pre>';
                  p = e.lastChild;
                }
                else p.innerHTML = text;
                Behaviour.applySubtree(p);
                if(stickToBottom) scroller.scrollToBottom();
              }

              e.fetchedBytes     = rsp.getResponseHeader("X-Text-Size");
              e.consoleAnnotator = rsp.getResponseHeader("X-ConsoleAnnotator");
	            if(rsp.getResponseHeader("X-More-Data")=="true")
	              setTimeout(function(){fetchNext(e,href);},1000);
	          <j:if test="${spinner!=null}">
	            else
	              $$("${spinner}").style.display = "none";
	          </j:if>
	          }
	      });
	    }
	  </j:if>
	  $$("${idref}").fetchedBytes = ${empty(startOffset)?0:startOffset};
	  fetchNext($$("${idref}"),"${href}");
	</script>
</j:jelly>
